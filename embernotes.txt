routes:
we would like the page to be served on the /about URL. In order
to do this, we will need to tell Ember about our plan to add a page
at that location. Otherwise, Ember will think we have visited an invalid URL!

The map() method of your Ember application's router can be
 invoked to define URL mappings. When calling map(), you
 should pass a function that will be invoked with the value
  this set to an object which you can use to create routes.
Ex :
Router.map(function() {
  this.route('about', { path: '/about' });
  this.route('favorites', { path: '/favs' });
});

Now, when the user visits /about, Ember will render the about
template. Visiting /favs will render the favorites template.

You can leave off the path if it is the same as the route name.
 In this case, the following is equivalent to the above example

Router.map(function() {
  this.route('about');
  this.route('favorites', { path: '/favs' });
});

inside our templates we can use
<link To @route="routename">
link to routename
</linkTo>


ex : Router.map(function() {
  this.route('blog_post', { path: '/blog-post' });
});

now <linkTo @route="blog_post">dfdf<linkTo>
route  template will be /blog-post
template will be blog_post


Components :
Breaking html file into pieces

breaking html into pieces and using part as a Components

to access Components within a folder we use :: example :<ReceivedMessage::avatar>

Component: Jumbo

<div class="jumbo">
<div class="right tomster"></div>
{{yield}}
</div>

no pathing simply using 

{{yield}} this keyword help us to put some content between custom made tags

<Jumbo>
//content : it is becoz of {{yield}}
</Jumbo>

testing Component 

Here, we used the generator to generate a component test, also known
 as a rendering test. These are used to render and test a single 
 component at a time. This is in contrast to the acceptance tests
  that we wrote earlier, which have to navigate and render entire
   pages worth of content

   instead of Visiting url we render component 

{{outlet}} denotes the place where our sites pages should be rendered into
similar to {{yield}}


component name first letter must be capital 
 
 we can use Image component as <Rental::Image>
 those component like <Image /> call image component 

 Addng behaviuors 

 to add javascript file with <Rental::Image>
we will run command ember generate-calss rental.image 
it will create a javascript file with names as image.js





